mod guest_rs_bytecode;
use guest_rs_bytecode::BYTECODE;

fn main() -> (u8, u8, u8, u8) {
let arr = array![168, 147, 167, 191, 24, 216, 87, 191, 108, 198, 4, 62, 186, 218, 36, 190, 210, 248, 51, 191, 140, 192, 78, 63, 8, 174, 206, 190, 39, 121, 62, 190, 204, 99, 231, 63, 163, 95, 128, 62, 120, 214, 69, 189, 92, 46, 88, 190, 14, 192, 28, 64, 57, 8, 242, 61, 216, 254, 223, 62, 16, 207, 65, 188, 56, 215, 32, 191, 34, 68, 43, 191, 53, 225, 13, 62, 200, 127, 102, 62, 183, 9, 25, 191, 5, 48, 25, 62, 242, 66, 171, 61, 20, 238, 231, 190, 128, 162, 74, 190, 226, 210, 185, 63, 30, 148, 153, 189, 251, 62, 63, 63, 46, 69, 112, 62, 68, 88, 209, 62, 216, 248, 14, 191, 188, 128, 30, 191, 174, 42, 159, 61, 180, 63, 3, 190, 54, 12, 118, 190, 122, 35, 114, 191, 156, 229, 77, 62, 86, 79, 204, 61, 2, 189, 71, 191, 239, 104, 147, 191, 8, 195, 35, 60, 172, 215, 23, 63, 21, 171, 81, 63, 27, 156, 96, 63, 106, 103, 5, 191, 204, 124, 240, 62, 152, 181, 49, 191, 195, 25, 251, 189, 55, 236, 117, 62, 216, 194, 76, 189, 53, 234, 98, 62, 58, 239, 40, 62, 196, 143, 102, 62, 23, 235, 146, 63, 195, 188, 19, 62, 243, 177, 44, 190, 155, 232, 18, 191, 164, 159, 176, 191, 126, 109, 253, 190, 185, 227, 35, 62, 213, 30, 23, 62, 246, 207, 215, 190, 63, 194, 246, 190, 179, 145, 26, 63, 84, 244, 244, 62, 174, 78, 105, 191, 181, 92, 44, 63, 48, 16, 193, 186, 106, 20, 246, 189, 61, 215, 14, 190, 35, 135, 120, 191, 250, 222, 20, 63, 58, 0, 146, 189, 238, 222, 61, 191, 79, 225, 214, 62, 1, 215, 112, 191, 138, 85, 217, 63, 22, 78, 212, 190, 16, 32, 247, 62, 86, 90, 54, 61, 34, 242, 129, 191, 154, 117, 142, 62, 72, 168, 238, 60, 132, 106, 187, 62, 67, 38, 197, 190, 152, 189, 197, 190, 152, 238, 237, 62, 63, 46, 141, 188, 254, 77, 42, 191, 226, 93, 249, 62, 17, 72, 119, 191, 110, 73, 164, 62, 186, 63, 226, 190, 7, 197, 69, 190, 212, 131, 70, 63, 106, 119, 18, 190, 145, 204, 140, 63, 42, 139, 18, 191, 6, 10, 90, 191, 167, 220, 63, 63, 117, 253, 245, 190, 183, 141, 130, 63, 240, 59, 170, 191, 203, 119, 254, 62, 224, 39, 83, 62, 253, 130, 196, 62, 222, 122, 197, 190, 110, 90, 164, 190, 141, 77, 170, 63, 176, 34, 120, 190, 126, 20, 236, 190, 200, 176, 153, 63, 211, 229, 142, 190, 198, 59, 225, 189, 37, 127, 236, 190, 91, 86, 69, 191, 43, 178, 234, 62, 35, 214, 88, 191, 37, 83, 15, 190, 82, 78, 178, 62, 15, 25, 24, 191, 71, 216, 92, 191, 143, 50, 3, 191, 0, 65, 85, 60, 128, 186, 92, 191, 158, 158, 244, 190, 134, 29, 252, 190, 46, 118, 136, 63, 168, 147, 167, 191, 24, 216, 87, 191, 108, 198, 4, 62, 186, 218, 36, 190, 210, 248, 51, 191, 140, 192, 78, 63, 8, 174, 206, 190, 39, 121, 62, 190, 204, 99, 231, 63, 163, 95, 128, 62, 120, 214, 69, 189, 92, 46, 88, 190, 14, 192, 28, 64, 57, 8, 242, 61, 216, 254, 223, 62, 16, 207, 65, 188, 56, 215, 32, 191, 34, 68, 43, 191, 53, 225, 13, 62, 200, 127, 102, 62, 183, 9, 25, 191, 5, 48, 25, 62, 242, 66, 171, 61, 20, 238, 231, 190, 128, 162, 74, 190, 226, 210, 185, 63, 30, 148, 153, 189, 251, 62, 63, 63, 46, 69, 112, 62, 68, 88, 209, 62, 216, 248, 14, 191, 188, 128, 30, 191, 174, 42, 159, 61, 180, 63, 3, 190, 54, 12, 118, 190, 122, 35, 114, 191, 156, 229, 77, 62, 86, 79, 204, 61, 2, 189, 71, 191, 239, 104, 147, 191, 8, 195, 35, 60, 172, 215, 23, 63, 21, 171, 81, 63, 27, 156, 96, 63, 106, 103, 5, 191, 204, 124, 240, 62, 152, 181, 49, 191, 195, 25, 251, 189, 55, 236, 117, 62, 216, 194, 76, 189, 53, 234, 98, 62, 58, 239, 40, 62, 196, 143, 102, 62, 23, 235, 146, 63, 195, 188, 19, 62, 243, 177, 44, 190, 155, 232, 18, 191, 164, 159, 176, 191, 126, 109, 253, 190, 185, 227, 35, 62, 213, 30, 23, 62, 246, 207, 215, 190, 63, 194, 246, 190, 179, 145, 26, 63, 84, 244, 244, 62, 174, 78, 105, 191, 181, 92, 44, 63, 48, 16, 193, 186, 106, 20, 246, 189, 61, 215, 14, 190, 35, 135, 120, 191, 250, 222, 20, 63, 58, 0, 146, 189, 238, 222, 61, 191, 79, 225, 214, 62, 1, 215, 112, 191, 138, 85, 217, 63, 22, 78, 212, 190, 16, 32, 247, 62, 86, 90, 54, 61, 34, 242, 129, 191, 154, 117, 142, 62, 72, 168, 238, 60, 132, 106, 187, 62, 67, 38, 197, 190, 152, 189, 197, 190, 152, 238, 237, 62, 63, 46, 141, 188, 254, 77, 42, 191, 226, 93, 249, 62, 17, 72, 119, 191, 110, 73, 164, 62, 186, 63, 226, 190, 7, 197, 69, 190, 212, 131, 70, 63, 106, 119, 18, 190, 145, 204, 140, 63, 42, 139, 18, 191, 6, 10, 90, 191, 167, 220, 63, 63, 117, 253, 245, 190, 183, 141, 130, 63, 240, 59, 170, 191, 203, 119, 254, 62, 224, 39, 83, 62, 253, 130, 196, 62, 222, 122, 197, 190, 110, 90, 164, 190, 141, 77, 170, 63, 176, 34, 120, 190, 126, 20, 236, 190, 200, 176, 153, 63, 211, 229, 142, 190, 198, 59, 225, 189, 37, 127, 236, 190, 91, 86, 69, 191, 43, 178, 234, 62, 35, 214, 88, 191, 37, 83, 15, 190, 82, 78, 178, 62, 15, 25, 24, 191, 71, 216, 92, 191, 143, 50, 3, 191, 0, 65, 85, 60, 128, 186, 92, 191, 158, 158, 244, 190, 134, 29, 252, 190, 46, 118, 136, 63];
    let res = compute_dot(arr);
    println!("res: {:?}", res);
    (*res.at(0), *res.at(1), *res.at(2), *res.at(3))
}

fn add(x: u8, y: u8) -> u8 {
    let mut args = ArrayTrait::<u8>::new();
    args.append(x);
    args.append(y);
    let res = riscairo::riscv_call(BYTECODE.span(), @"add", @args,);
    *res.at(0)
}

fn compute_dot(data: Array<u8>) -> Array<u8> {
    riscairo::riscv_call(BYTECODE.span(), @"compute_dot", @data,)
}